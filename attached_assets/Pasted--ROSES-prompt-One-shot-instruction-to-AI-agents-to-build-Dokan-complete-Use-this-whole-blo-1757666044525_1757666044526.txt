# ROSES prompt — One-shot instruction to AI agents to build **Dokan** (complete)

Use this whole block as a single instruction to your AI agents (frontend, backend, devops, QA, UI/UX, security). It tells them *exactly* what to build, how to build it, what to deliver, and how it will be accepted.

```
ROLE
You are a team of cooperative AI development agents (FrontendAgent, BackendAgent, DevOpsAgent, SecurityAgent, QAAgent, UIUXAgent, DocsAgent). Work in parallel, communicate by editing the same repo. Produce production-ready code, tests, CI, docs, and deploy config. Use best practices, secure defaults, and keep every change atomic and documented.

OBJECTIVE
Build **Dokan** — a full-featured e-commerce web app (webapp only) with separate User and Vendor accounts, a secure backend, admin approval for vendors, COD checkout, wishlist/orders/settings, product management, and a clean, simple white + sky-blue UI with smooth animations and a loading logo.

SCENARIO
Manjil (owner) will test the app. Nothing works until users or vendors are authenticated. Auth must support two signup/login types (user or vendor). Vendors register but cannot list products until approved by an Admin.

EXPECTED SOLUTION (deliverables)
1. Full codebase in a single repo (monorepo is ok) with:
   - Frontend: React + Tailwind CSS, built with Node.js for dev/build. Use Axios/fetch for API, React Router for routes, and Framer Motion for animations. Avoid UI library bugs; custom select components must be correct.
   - Backend: Python + Flask (Flask-RESTful or Flask API style) for REST API; SQLAlchemy for ORM; Alembic for migrations.
   - DB: Dev: SQLite; Prod: PostgreSQL or MariaDB/MySQL (provide docker-compose and production config). Keep schema migration-ready.
   - Authentication: JWT (access + refresh) with secure storage (httpOnly cookie for refresh, Authorization header for access), or session cookies if preferred. Password hashing with bcrypt or Argon2.
   - Security: HTTPS enforced in prod, TLS everywhere, encrypt sensitive fields at rest (use python-cryptography AES-GCM for PII like payment meta), rotateable secrets, environment variables, and a secrets-scan script.
   - Admin panel: Admin can approve vendors, view orders, manage products.
   - Vendor workflow: register → pending → admin approves → vendor can manage own products (CRUD + images).
   - User flows: register/login, edit profile, wishlist, view orders, create cart, checkout COD (creates order with status), review/ratings with images.
   - Pages: Home, About, Contact, Shop (search, filter, categories), Policy, Privacy & Cookie Policy, Account Dashboard (User & Vendor), Vendor Application Guide, User Manual & FAQ, Technical Documentation, Community Forum stub (or link to Discourse).
   - UX: White + sky-blue color scheme, subtle hover effects, loading animated Dokan logo, smooth page transitions, accessible (a11y basics).
   - Fixes: Resolve the `A <Select.Item /> must have a value prop that is not an empty string` runtime error. Ensure every select option has a non-empty string value and test that clearing selection uses `"none"` or null handled safely.
   - Localization: show currency in Nepali Rupees (NPR) on UI; internal storage uses cents/paisa integer.
   - Secrets: remove API keys/secrets from docs and repo; add `.env.example` and `README` on how to set secrets.
   - Tests: unit tests for backend (pytest), frontend tests (jest + react-testing-library), e2e tests (Playwright or Cypress) for main flows.
   - CI: GitHub Actions to run linters, unit tests, and e2e tests on PRs.
   - Documentation: README, setup & deploy steps, API OpenAPI spec, and an Admin/User manual.

CONSTRAINTS & TECH CHOICES
- Frontend: React (functional components + hooks), Tailwind CSS, Framer Motion. Use Vite or Create React App + Node for builds.
- Backend: Python 3.11+, Flask, SQLAlchemy, Alembic, bcrypt/argon2, python-dotenv.
- DB: default SQLite for development; provide docker-compose for Postgres or MariaDB for production.
- Images: store product images on local storage in dev and provide S3-compatible adapter (minio) instructions for prod.
- Payment: implement COD only (order creation + order_status workflow); design payment modular so future payment methods can be added.
- Encryption: use AES-256-GCM for field-level encryption (customer payment metadata) and store keys in env or an external secret manager.
- No admin credentials in public UI or Quick Access links. Remove “Admin Login” from public quick access; admin login must be behind /admin (not exposed in quick links) and protected.
- Bug fix: wherever a `Select.Item` or `<option>` is rendered, validate `value` server-side and frontend ensure `value={String(x.value)}` and do not render empty string as a value. If you want an empty placeholder, use `value="none"` or `value=""` with disabled attribute on placeholder and ensure library supports it.

IMPLEMENTATION STEPS (agent-level tasks)
FrontendAgent:
- Implement all pages and components. Use a single layout, header nav, footer with Quick Links.
- Auth UI: combined /auth page with toggle: "Sign up / Login as User" and "Sign up / Login as Vendor".
- Dashboard: user dashboard (profile editable, orders list, wishlist, settings), vendor dashboard (pending until approved, then product management UI).
- Shop page: list, search, filters, category facet, product page with wishlist and reviews.
- Use global state (React Context or Redux) for auth/session.
- Ensure Select components never pass empty string values. Add unit tests for Select behavior.

BackendAgent:
- Build REST API with endpoints (examples):
  - POST /api/auth/register {role: "user"|"vendor", ...}
  - POST /api/auth/login
  - POST /api/auth/logout
  - GET /api/users/me
  - PATCH /api/users/me
  - GET /api/products
  - GET /api/products/:id
  - POST /api/products (vendor only)
  - PATCH /api/products/:id (vendor & owner only)
  - DELETE /api/products/:id (vendor & owner only)
  - POST /api/orders (user)
  - GET /api/orders (user/admin)
  - POST /api/vendors/:id/approve (admin)
  - POST /api/wishlist (user)
  - POST /api/reviews (user)
- Implement role-based access control (RBAC).
- Implement migration scripts and seed data for testing.

DevOpsAgent:
- Provide Dockerfile(s) and docker-compose with services: web(frontend), api(backend), db(postgres), minio(optional), redis(optional).
- Add GitHub Actions: lint, run tests, build, push image (optional).
- Add instructions for Replit deployment if requested (quick deploy file).

SecurityAgent:
- Enforce HTTPS for production; set HSTS, secure cookies, CSRF protection.
- Hash passwords with bcrypt/argon2 parameters recommended.
- Rotateable key for AES field encryption.
- Add dependency vulnerability scan (e.g. GitHub Dependabot or safety).
- Add pre-commit hooks: black/isort (python), eslint + prettier (js), git-secrets.

QAAgent:
- Create test plan and write tests:
  - Signup/login user
  - Signup vendor -> admin approval -> vendor can list product
  - Create product -> show on shop -> add to wishlist -> place COD order
  - Edit profile & persist change to DB
  - Ensure Orders, Wishlist, Settings pages render and are interactive
  - Validate Select dropdowns do not throw runtime error
- Implement e2e test scenarios in Playwright/Cypress and run in CI.

UIUXAgent:
- Provide UI mockups (Figma-like JSON or a simple React storybook) with white + sky-blue scheme.
- Create animated Dokan logo (SVG + CSS/Framer Motion) and a loading screen that shows the logo while app hydrates.
- Provide accessible color contrast and mobile responsiveness.

DocsAgent:
- Provide README with:
  - Quick start (dev)
  - How to run migrations, seeds
  - How to configure `.env` (use `.env.example`)
  - How to remove secrets from Git history if accidentally committed (BFG or git filter-branch steps)
  - API docs (OpenAPI YAML/JSON)
  - Deployment guide (docker-compose + prod notes)
- Add an “In progress tasks” board in repo (TODO.md or GitHub Projects) with the given tasks (visual effects, counts, remove secrets, admin fixes, vendor product visibility, change to NPR, wishlist, reviews, fix products after refresh, etc.).

ACCEPTANCE CRITERIA (must pass to be done)
1. Shop page renders without runtime overlay errors; no `Select.Item` value errors anywhere.
2. User can register/login, edit profile, save changes to DB, and see updated info in dashboard.
3. Orders, Wishlist, Settings pages fully functional for user.
4. Vendor registration creates a vendor account in `pending` state; admin can approve; after approval vendor can add/edit/delete their products; vendor sees only their products.
5. Admin Quick Access/public areas do NOT show admin credentials or links; admin entry is protected behind authentication and not advertised publicly.
6. All sensitive secrets removed from repo and stored in `.env`; `.env.example` provided.
7. Passwords hashed; PII encrypted at rest for specified fields; HTTPS enforced in prod config.
8. Tests for main flows pass in CI.
9. Currency displays in NPR; backend stores integer amounts (paisa).
10. Repo includes setup instructions, docker-compose, migration scripts, OpenAPI spec, and seeded demo data.

TEST CASES (high-level)
- TC1: New user signup → login → edit profile → verify DB update.
- TC2: New vendor signup → cannot create product (403 or forbidden) until admin approves → admin approves → vendor creates product → product visible on shop.
- TC3: Add product to wishlist → create COD order → verify order status `pending` stored and visible in admin orders page.
- TC4: Open Shop page and interact with all selects and filters → no runtime overlay or console error.
- TC5: Attempt to access /admin without login → redirect to login and no exposed admin info.

QUALITY RULES (non-negotiable)
- No secrets in commits; use .env and .gitignore.
- Use semantic versioning and meaningful commits. Provide CHANGELOG.md.
- Unit and integration tests required for every major feature.
- Accessibility: images have alt, form labels, keyboard navigability for selects.

DELIVERY FORMAT
- Single GitHub repo (or zip). Branch: `feature/dokan-complete`.
- Main README + step-by-step run commands.
- API docs (OpenAPI) at `/docs`.
- Running demo: `docker-compose up --build` (dev) with seeded demo users: admin@example.com (password stored only in README dev instructions).
- Final PR must include screenshots of Shop, Dashboard (user + vendor), vendor approval action, and CI passing.

DO NOT
- Expose admin credentials or secrets in the repo.
- Use empty string values for Select options causing runtime overlay error.
- Skip tests or documentation.

PRIORITY BUG FIX (first task)
1. Fix select runtime error across the app: search/replace any `value={""}` or missing value, ensure placeholder is `value="none"` + disabled OR use null handling. Add a small unit test to reproduce and prevent regression.

If anything is ambiguous, make a safe default that matches the spec above (Flask backend + React frontend + Node dev tools; dev DB = SQLite, prod = Postgres/MariaDB). Commit often, keep PRs small, document decisions in PR descriptions.

END.
```

If you want, I can now split this into role-specific prompts for each AI agent (FrontendAgent / BackendAgent / QAAgent / DevOpsAgent) and produce the first PR patch (example file changes) — tell me which agent to run first and I'll output the exact code/PR content.
